<%- include('../layout', {body: `
<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow-lg border-0 mt-5">
                <div class="card-header text-center">
                    <h3 class="fw-light my-4">
                        <i class="fas fa-user-plus me-2"></i>Join FoodConnect Malaysia - MVP Oct 2025
                    </h3>
                </div>
                <div class="card-body p-5">
                    <div id="alert-container"></div>
                    
                    <!-- User Type Selection -->
                    <div class="mb-4">
                        <h5 class="mb-3">I want to join as:</h5>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="card user-type-card" data-type="restaurant">
                                    <div class="card-body text-center p-4">
                                        <i class="fas fa-store fa-3x mb-3" style="color: #0F4C75;"></i>
                                        <h5>Restaurant Owner</h5>
                                        <p class="small text-muted">Post campaigns and find influencers</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card user-type-card" data-type="influencer">
                                    <div class="card-body text-center p-4">
                                        <i class="fas fa-camera fa-3x text-success mb-3"></i>
                                        <h5>Food Influencer</h5>
                                        <p class="small text-muted">Apply to campaigns and create content</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <form id="registerForm" class="needs-validation" novalidate style="display: none;">
                        <input type="hidden" id="user_type" name="user_type" value="">
                        
                        <div class="form-floating mb-3">
                            <input class="form-control" id="email" name="email" type="email" placeholder="name@example.com" required>
                            <label for="email">Email address</label>
                            <div class="invalid-feedback">Please enter a valid email address.</div>
                        </div>
                        
                        <div class="form-floating mb-3 position-relative">
                            <input class="form-control" id="password" name="password" type="password" placeholder="Password" required minlength="6" style="padding-right: 3.5rem !important;">
                            <label for="password">Password</label>
                            <button type="button" class="btn position-absolute password-toggle-btn" onclick="togglePasswordVisibility('password', this)" title="Toggle password visibility">
                                <i class="fas fa-eye text-muted"></i>
                            </button>
                            <div class="invalid-feedback">Password must be at least 6 characters long.</div>
                            <div class="form-text">Minimum 6 characters required</div>
                        </div>
                        
                        <div class="form-floating mb-3 position-relative">
                            <input class="form-control" id="confirmPassword" name="confirmPassword" type="password" placeholder="Confirm Password" required style="padding-right: 3.5rem !important;">
                            <label for="confirmPassword">Confirm Password</label>
                            <button type="button" class="btn position-absolute password-toggle-btn" onclick="togglePasswordVisibility('confirmPassword', this)" title="Toggle password visibility">
                                <i class="fas fa-eye text-muted"></i>
                            </button>
                            <div class="invalid-feedback">Passwords do not match.</div>
                        </div>
                        
                        <!-- Additional Fields Based on User Type -->
                        <div id="additional-fields" style="display: none;">
                            <!-- Restaurant Fields -->
                            <div id="restaurant-fields" style="display: none;">
                                <div class="form-floating mb-3">
                                    <input class="form-control" id="business_name" name="business_name" type="text" placeholder="Business Name" required>
                                    <label for="business_name">Business Name <span class="text-danger">*</span></label>
                                    <div class="invalid-feedback">Please enter your business name.</div>
                                </div>
                                <div class="form-floating mb-3">
                                    <textarea class="form-control" id="address" name="address" placeholder="Business Address" required style="height: 100px;"></textarea>
                                    <label for="address">Business Address <span class="text-danger">*</span></label>
                                    <div class="invalid-feedback">Please enter your business address.</div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-floating mb-3">
                                            <input class="form-control" id="restaurant_city" name="city" type="text" placeholder="City" required>
                                            <label for="restaurant_city">City <span class="text-danger">*</span></label>
                                            <div class="invalid-feedback">Please enter your city.</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating mb-3">
                                            <select class="form-select" id="restaurant_state" name="state" required>
                                                <option value="">Select State</option>
                                                <option value="Johor">Johor</option>
                                                <option value="Kedah">Kedah</option>
                                                <option value="Kelantan">Kelantan</option>
                                                <option value="Kuala Lumpur">Kuala Lumpur</option>
                                                <option value="Labuan">Labuan</option>
                                                <option value="Melaka">Melaka</option>
                                                <option value="Negeri Sembilan">Negeri Sembilan</option>
                                                <option value="Pahang">Pahang</option>
                                                <option value="Perak">Perak</option>
                                                <option value="Perlis">Perlis</option>
                                                <option value="Pulau Pinang">Pulau Pinang</option>
                                                <option value="Putrajaya">Putrajaya</option>
                                                <option value="Sabah">Sabah</option>
                                                <option value="Sarawak">Sarawak</option>
                                                <option value="Selangor">Selangor</option>
                                                <option value="Terengganu">Terengganu</option>
                                            </select>
                                            <label for="restaurant_state">State <span class="text-danger">*</span></label>
                                            <div class="invalid-feedback">Please select your state.</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-floating mb-3">
                                    <input class="form-control" id="google_maps_link" name="google_maps_link" type="url" placeholder="Google Maps Link" required>
                                    <label for="google_maps_link">Google Maps Link <span class="text-danger">*</span></label>
                                    <div class="form-text">Share your Google Maps or Google My Business link</div>
                                    <div class="invalid-feedback">Please provide your Google Maps link.</div>
                                </div>
                            </div>
                            
                            <!-- Influencer Fields -->
                            <div id="influencer-fields" style="display: none;">
                                <div class="form-floating mb-3">
                                    <input class="form-control" id="display_name" name="display_name" type="text" placeholder="Display Name" required>
                                    <label for="display_name">Display Name <span class="text-danger">*</span></label>
                                    <div class="form-text">Your public name or brand name</div>
                                    <div class="invalid-feedback">Please enter your display name.</div>
                                </div>
                                <div class="form-floating mb-3">
                                    <input class="form-control" id="location" name="location" type="text" placeholder="Location" required>
                                    <label for="location">Location <span class="text-danger">*</span></label>
                                    <div class="form-text">e.g., Kuala Lumpur, Malaysia</div>
                                    <div class="invalid-feedback">Please enter your location.</div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-floating mb-3">
                                            <input class="form-control" id="influencer_city" name="city" type="text" placeholder="City" required>
                                            <label for="influencer_city">City <span class="text-danger">*</span></label>
                                            <div class="invalid-feedback">Please enter your city.</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating mb-3">
                                            <select class="form-select" id="influencer_state" name="state" required>
                                                <option value="">Select State</option>
                                                <option value="Johor">Johor</option>
                                                <option value="Kedah">Kedah</option>
                                                <option value="Kelantan">Kelantan</option>
                                                <option value="Kuala Lumpur">Kuala Lumpur</option>
                                                <option value="Labuan">Labuan</option>
                                                <option value="Melaka">Melaka</option>
                                                <option value="Negeri Sembilan">Negeri Sembilan</option>
                                                <option value="Pahang">Pahang</option>
                                                <option value="Perak">Perak</option>
                                                <option value="Perlis">Perlis</option>
                                                <option value="Pulau Pinang">Pulau Pinang</option>
                                                <option value="Putrajaya">Putrajaya</option>
                                                <option value="Sabah">Sabah</option>
                                                <option value="Sarawak">Sarawak</option>
                                                <option value="Selangor">Selangor</option>
                                                <option value="Terengganu">Terengganu</option>
                                            </select>
                                            <label for="influencer_state">State <span class="text-danger">*</span></label>
                                            <div class="invalid-feedback">Please select your state.</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-floating mb-3">
                                    <input class="form-control" id="instagram_username" name="instagram_username" type="text" placeholder="@username">
                                    <label for="instagram_username">Instagram Username (Optional)</label>
                                    <div class="form-text">Enter your Instagram username (e.g., @foodlover123)</div>
                                </div>
                                <div class="form-floating mb-3">
                                    <input class="form-control" id="tiktok_username" name="tiktok_username" type="text" placeholder="@username">
                                    <label for="tiktok_username">TikTok Username (Optional)</label>
                                    <div class="form-text">Enter your TikTok username</div>
                                </div>
                                <div class="form-floating mb-3">
                                    <input class="form-control" id="xhs_username" name="xhs_username" type="text" placeholder="Little Red Book ID">
                                    <label for="xhs_username">小红书 (Little Red Book) Username (Optional)</label>
                                    <div class="form-text">Your Xiaohongshu/Little Red Book username</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-check mb-3">
                            <input class="form-check-input" id="terms" type="checkbox" required>
                            <label class="form-check-label" for="terms">
                                I agree to the <a href="/terms" target="_blank">Terms of Service</a> and <a href="/privacy" target="_blank">Privacy Policy</a>
                            </label>
                            <div class="invalid-feedback">You must agree to the terms to continue.</div>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button class="btn btn-primary btn-lg" type="submit" id="registerBtn">
                                <span class="btn-text">Create Account</span>
                                <span class="btn-loading d-none">
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    Creating Account...
                                </span>
                            </button>
                            <button class="btn btn-outline-secondary" type="button" id="backBtn">
                                <i class="fas fa-arrow-left me-2"></i>Back to User Type
                            </button>
                        </div>
                    </form>
                </div>
                <div class="card-footer text-center py-3">
                    <div class="small">
                        <a href="/login">Have an account? Go to login</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.user-type-card {
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid transparent;
}

.user-type-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.user-type-card.selected {
    border-color: #0F4C75;
    background-color: rgba(15, 76, 117, 0.05);
}

.user-type-card.selected[data-type="influencer"] {
    border-color: #198754;
    background-color: rgba(25, 135, 84, 0.05);
}

/* Password toggle button positioning - centered in text box */
.password-toggle-btn {
    position: absolute;
    top: 50%;
    right: 1rem;
    transform: translateY(-50%);
    border: none !important;
    background: none !important;
    padding: 0.5rem !important;
    z-index: 10;
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}

.password-toggle-btn:hover {
    background-color: rgba(0,0,0,0.05) !important;
    border-radius: 50%;
}

/* Adjust input padding for eye button only */
.form-floating input[type="password"] {
    padding-right: 3.5rem !important; /* Space for eye button */
}

/* Remove ALL validation styling and green ticks */
.form-floating .form-control:valid,
.form-floating .form-control.is-valid {
    border-color: #ced4da !important;
    background-image: none !important;
    box-shadow: none !important;
}

.form-floating .form-control:invalid,
.form-floating .form-control.is-invalid {
    border-color: #ced4da !important;
    background-image: none !important;
    box-shadow: none !important;
}

/* Remove validation feedback backgrounds */
.form-control:valid,
.form-control.is-valid {
    background-image: none !important;
}

.form-control:invalid,
.form-control.is-invalid {
    background-image: none !important;
}

/* Loading state improvements */
.btn-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.spinner-border-sm {
    width: 1rem;
    height: 1rem;
}

/* Text visibility fixes - BALANCED solution */
/* Default dark text on light backgrounds */
body {
    color: #212529 !important;
    background-color: #ffffff !important;
}

p, span, div, li, td, th, .card-body, .form-label, .form-text, .invalid-feedback, .valid-feedback {
    color: #212529 !important;
}

h1, h2, h3, h4, h5, h6 {
    color: #212529 !important;
}

/* Form elements - dark text on white background */
.form-control, .form-select, .form-check-label {
    color: #212529 !important;
    background-color: #ffffff !important;
    border-color: #ced4da !important;
}

.form-control:focus {
    background-color: #ffffff !important;
    color: #212529 !important;
}

/* ONLY navbar should have white text (blue background) */
.navbar-dark {
    background-color: #0F4C75 !important;
}

.navbar-dark .navbar-brand,
.navbar-dark .navbar-nav .nav-link,
.navbar-dark .navbar-toggler-icon {
    color: white !important;
}

/* Dark backgrounds only */
.bg-dark, .bg-dark * {
    color: white !important;
}

/* Links - blue on light backgrounds, white on dark backgrounds */
a {
    color: #0F4C75 !important;
}

a:hover, a:focus {
    color: #083c5c !important;
}

.navbar-dark a {
    color: white !important;
}

.navbar-dark a:hover {
    color: #e0e0e0 !important;
}

.bg-dark a {
    color: white !important;
}

/* Cards and content areas */
.card, .card-body, .card-header {
    background-color: white !important;
    color: #212529 !important;
}

.card-header h1, .card-header h2, .card-header h3, .card-header h4, .card-header h5, .card-header h6 {
    color: #212529 !important;
}

/* Buttons */
.btn-primary {
    background-color: #0F4C75 !important;
    color: white !important;
}

.btn-secondary, .btn-outline-secondary {
    color: #212529 !important;
}

/* Fix validation feedback positioning */
.form-floating .invalid-feedback {
    margin-top: 0.25rem;
    color: #dc3545 !important;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('🔧 Registration page script loaded');
    const userTypeCards = document.querySelectorAll('.user-type-card');
    const registerForm = document.getElementById('registerForm');
    const userTypeInput = document.getElementById('user_type');
    const registerBtn = document.getElementById('registerBtn');
    const backBtn = document.getElementById('backBtn');
    const btnText = registerBtn.querySelector('.btn-text');
    const btnLoading = registerBtn.querySelector('.btn-loading');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');

    console.log('🔍 Elements found:', {
        registerForm: !!registerForm,
        registerBtn: !!registerBtn,
        btnText: !!btnText,
        btnLoading: !!btnLoading
    });
    
    // Check if user is already logged in (if authManager is available)
    if (typeof authManager !== 'undefined' && authManager.isAuthenticated()) {
        window.location.href = '/dashboard';
        return;
    }
    
    // Check URL parameters for user type
    const urlParams = new URLSearchParams(window.location.search);
    const preselectedType = urlParams.get('type');
    if (preselectedType && ['restaurant', 'influencer'].includes(preselectedType)) {
        selectUserType(preselectedType);
    }
    
    // User type selection
    userTypeCards.forEach(card => {
        card.addEventListener('click', function(e) {
            e.preventDefault();
            const type = this.dataset.type;
            console.log('Card clicked, type:', type); // Debug log
            selectUserType(type);
        });
    });
    
    function selectUserType(type) {
        console.log('selectUserType called with:', type); // Debug log
        userTypeCards.forEach(card => card.classList.remove('selected'));
        const selectedCard = document.querySelector(\`[data-type="\${type}"]\`);
        if (selectedCard) {
            selectedCard.classList.add('selected');
        } else {
            console.error('Could not find card with type:', type);
        }
        userTypeInput.value = type;
        
        // Show additional fields
        const additionalFields = document.getElementById('additional-fields');
        const restaurantFields = document.getElementById('restaurant-fields');
        const influencerFields = document.getElementById('influencer-fields');
        
        additionalFields.style.display = 'block';
        
        if (type === 'restaurant') {
            restaurantFields.style.display = 'block';
            influencerFields.style.display = 'none';

            // Enable required validation for restaurant fields
            document.getElementById('business_name').required = true;
            document.getElementById('address').required = true;
            document.getElementById('restaurant_city').required = true;
            document.getElementById('restaurant_state').required = true;
            document.getElementById('google_maps_link').required = true;

            // Disable required validation for influencer fields
            document.getElementById('display_name').required = false;
            document.getElementById('location').required = false;
            document.getElementById('influencer_city').required = false;
            document.getElementById('influencer_state').required = false;

        } else if (type === 'influencer') {
            influencerFields.style.display = 'block';
            restaurantFields.style.display = 'none';

            // Enable required validation for influencer fields
            document.getElementById('display_name').required = true;
            document.getElementById('location').required = true;
            document.getElementById('influencer_city').required = true;
            document.getElementById('influencer_state').required = true;

            // Disable required validation for restaurant fields
            document.getElementById('business_name').required = false;
            document.getElementById('address').required = false;
            document.getElementById('restaurant_city').required = false;
            document.getElementById('restaurant_state').required = false;
            document.getElementById('google_maps_link').required = false;
        }
        
        console.log('Form display before:', registerForm.style.display); // Debug log
        registerForm.style.display = 'block';
        console.log('Form display after:', registerForm.style.display); // Debug log
        registerForm.scrollIntoView({ behavior: 'smooth' });
    }
    
    // Back button
    backBtn.addEventListener('click', function() {
        registerForm.style.display = 'none';
        userTypeCards.forEach(card => card.classList.remove('selected'));
        userTypeInput.value = '';
        
        // Hide additional fields
        document.getElementById('additional-fields').style.display = 'none';
        document.getElementById('restaurant-fields').style.display = 'none';
        document.getElementById('influencer-fields').style.display = 'none';

        // Remove required attributes from all conditional fields
        document.getElementById('business_name').required = false;
        document.getElementById('address').required = false;
        document.getElementById('restaurant_city').required = false;
        document.getElementById('restaurant_state').required = false;
        document.getElementById('google_maps_link').required = false;
        document.getElementById('display_name').required = false;
        document.getElementById('location').required = false;
        document.getElementById('influencer_city').required = false;
        document.getElementById('influencer_state').required = false;
    });
    
    // Password validation
    passwordInput.addEventListener('input', validatePassword);
    confirmPasswordInput.addEventListener('input', validatePasswordMatch);
    
    function validatePassword() {
        const password = passwordInput.value;
        
        if (password && password.length < 6) {
            passwordInput.setCustomValidity('Password must be at least 6 characters long');
        } else {
            passwordInput.setCustomValidity('');
        }
        
        validatePasswordMatch();
    }
    
    function validatePasswordMatch() {
        const password = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        
        if (confirmPassword && password !== confirmPassword) {
            confirmPasswordInput.setCustomValidity('Passwords do not match');
        } else {
            confirmPasswordInput.setCustomValidity('');
        }
    }
    
    // Form submission
    registerForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('🚀 Form submission started');

        if (!registerForm.checkValidity()) {
            e.stopPropagation();
            registerForm.classList.add('was-validated');
            console.log('❌ Form validation failed');
            // Log which fields are invalid
            const invalidFields = registerForm.querySelectorAll(':invalid');
            console.log('Invalid fields:', Array.from(invalidFields).map(field => field.name || field.id));
            return;
        }

        console.log('✅ Form validation passed');
        
        // Show loading state
        btnText.classList.add('d-none');
        btnLoading.classList.remove('d-none');
        registerBtn.disabled = true;
        
        try {
            console.log('📦 Extracting form data...');
            const formData = new FormData(registerForm);
            const data = {
                email: formData.get('email'),
                password: formData.get('password'),
                user_type: formData.get('user_type')
            };
            console.log('📋 Basic form data:', data);
            
            // Add additional fields based on user type
            if (data.user_type === 'restaurant') {
                data.business_name = formData.get('business_name') || '';
                data.address = formData.get('address') || '';
                data.city = formData.get('city') || '';
                data.state = formData.get('state') || '';
                data.google_maps_link = formData.get('google_maps_link') || '';
                data.phone = formData.get('phone') || '';
                data.description = formData.get('description') || '';
                data.website = formData.get('website') || '';
                data.dietary_categories = formData.get('dietary_categories') || [];
            } else if (data.user_type === 'influencer') {
                data.display_name = formData.get('display_name') || '';
                data.location = formData.get('location') || '';
                data.city = formData.get('city') || '';
                data.state = formData.get('state') || '';
                data.instagram_username = formData.get('instagram_username') || '';
                data.tiktok_username = formData.get('tiktok_username') || '';
                data.xhs_username = formData.get('xhs_username') || '';
                data.bio = formData.get('bio') || '';
                data.phone = formData.get('phone') || '';
            }
            
            console.log('🔄 Sending registration data:', data);
            
            const response = await fetch('/api/auth/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            
            console.log('📡 Response status:', response.status);
            console.log('📡 Response headers:', Object.fromEntries(response.headers.entries()));
            
            let result;
            try {
                result = await response.json();
                console.log('📦 Response data:', result);
            } catch (jsonError) {
                console.error('❌ Failed to parse JSON response:', jsonError);
                const responseText = await response.text();
                console.error('Raw response text:', responseText);
                throw new Error('Server returned invalid JSON response: ' + responseText);
            }
            
            if (response.ok) {
                const launchMessage = \`
                    <div class="text-center">
                        <div class="mb-3">
                            <i class="fas fa-check-circle text-success" style="font-size: 3rem;"></i>
                        </div>
                        <h4 class="text-success mb-3">🎉 Registration Successful!</h4>
                        <p><strong>Your \${data.user_type} account has been created!</strong></p>
                        <div class="alert alert-info">
                            <i class="fas fa-envelope me-2"></i>
                            <strong>Check your email</strong> to verify your account and complete the registration.
                        </div>
                        <div class="alert alert-warning">
                            <i class="fas fa-calendar-alt me-2"></i>
                            <strong>MVP Launch: October 2025</strong><br>
                            You'll receive full platform access when we launch. Thank you for joining FoodConnect Malaysia!
                        </div>
                    </div>
                \`;
                showAlert(launchMessage, 'success');
                
                // Reset form after delay
                setTimeout(() => {
                    window.location.href = '/login?registered=true';
                }, 4000);
                
            } else {
                console.error('❌ Registration failed with status:', response.status);
                console.error('❌ Full error details:', result);
                
                let errorMessage = '';
                
                if (result.error) {
                    errorMessage = result.error;
                } else if (result.message) {
                    errorMessage = result.message;
                } else {
                    errorMessage = 'Unknown error occurred';
                }
                
                // Show detailed error information
                const detailedError = \`
                    <div>
                        <strong>Registration Failed (Status: \${response.status})</strong><br>
                        <strong>Error:</strong> \${errorMessage}<br>
                        \${result.details ? '<br><strong>Details:</strong><br><pre style="font-size: 12px; background: #f8f9fa; padding: 10px; border-radius: 4px; text-align: left;">' + JSON.stringify(result.details, null, 2) + '</pre>' : ''}
                        \${result.stack && result.stack.substring ? '<br><strong>Stack:</strong><br><pre style="font-size: 10px; background: #f8f9fa; padding: 10px; border-radius: 4px; text-align: left; max-height: 200px; overflow-y: auto;">' + result.stack + '</pre>' : ''}
                        <br><small><strong>Please screenshot this error and share it for debugging.</strong></small>
                    </div>
                \`;
                
                showAlert(detailedError, 'danger');
            }
            
        } catch (error) {
            console.error('Registration network error:', error);
            showAlert(\`
                <strong>Network Error:</strong><br>
                Unable to connect to the registration service. Please:
                <ul class="mt-2 mb-0">
                    <li>Check your internet connection</li>
                    <li>Try refreshing the page</li>
                    <li>Contact support if the problem persists</li>
                </ul>
            \`, 'danger');
        } finally {
            // Reset button state
            btnText.classList.remove('d-none');
            btnLoading.classList.add('d-none');
            registerBtn.disabled = false;
        }
    });
    
    function showAlert(message, type) {
        const alertContainer = document.getElementById('alert-container');
        alertContainer.innerHTML = \`
            <div class="alert alert-\${type} alert-dismissible fade show" role="alert">
                \${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        \`;
        
        // Scroll to alert
        alertContainer.scrollIntoView({ behavior: 'smooth' });
    }
    
    // Define togglePasswordVisibility function in global scope
    window.togglePasswordVisibility = function(inputId, button) {
        const passwordInput = document.getElementById(inputId);
        const icon = button.querySelector('i');

        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
            button.setAttribute('title', 'Hide password');
        } else {
            passwordInput.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
            button.setAttribute('title', 'Show password');
        }
    }

    // Function to toggle required fields based on user type
    function toggleUserTypeFields() {
        const userType = document.querySelector('input[name="user_type"]:checked')?.value;

        if (userType === 'restaurant') {
            // Enable required validation for restaurant fields
            setRequired('business_name', true);
            setRequired('address', true);
            setRequired('restaurant_city', true);
            setRequired('restaurant_state', true);
            setRequired('google_maps_link', true);

            // Disable required validation for influencer fields
            setRequired('display_name', false);
            setRequired('location', false);
            setRequired('influencer_city', false);
            setRequired('influencer_state', false);
        } else if (userType === 'influencer') {
            // Enable required validation for influencer fields
            setRequired('display_name', true);
            setRequired('location', true);
            setRequired('influencer_city', true);
            setRequired('influencer_state', true);

            // Disable required validation for restaurant fields
            setRequired('business_name', false);
            setRequired('address', false);
            setRequired('restaurant_city', false);
            setRequired('restaurant_state', false);
            setRequired('google_maps_link', false);
        }
    }

    function setRequired(fieldId, required) {
        const field = document.getElementById(fieldId);
        if (field) {
            field.required = required;
            if (required) {
                field.setAttribute('required', '');
            } else {
                field.removeAttribute('required');
            }
        }
    }

    // Add event listeners to user type radio buttons
    document.querySelectorAll('input[name="user_type"]').forEach(radio => {
        radio.addEventListener('change', toggleUserTypeFields);
    });

    // Run validation toggle on page load
    toggleUserTypeFields();
});
</script>
`}) %>